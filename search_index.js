var documenterSearchIndex = {"docs":
[{"location":"apiToken.html#How-to-generate-an-mPulse-API-Token","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"","category":"section"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"An mPulse API Token is a token unique to your mPulse account that allows you to authenticate with the mPulse Query and Repository APIs without sending your username and password over the network.","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"A token may be revoked or regenerated at any time, but you may only have one token at any given time.","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"The token is used to authenticate as you, so any script using your token has all of your privileges.","category":"page"},{"location":"apiToken.html#Step-1.-Sign-in-to-mPulse","page":"How to generate an mPulse API Token","title":"Step 1. Sign in to mPulse","text":"","category":"section"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"Sign in to mPulse by visiting https://mpulse.soasta.com/ and entering your username and password:","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"(Image: mPulse Login Screen showing username and password fields)","category":"page"},{"location":"apiToken.html#Step-2.-Visit-your-Account-Settings","page":"How to generate an mPulse API Token","title":"Step 2. Visit your Account Settings","text":"","category":"section"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"After signing in, click on your name in the top right corner to show the User Menu, and select Account from there:","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"(Image: mPulse User Menu showing Account, Tenant, Logout, About, Resources, Support, CloudLink Forum, and Contact Us links)","category":"page"},{"location":"apiToken.html#Step-3.-Generate-a-new-API-Token","page":"How to generate an mPulse API Token","title":"Step 3. Generate a new API Token","text":"","category":"section"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"In your account settings page, the first section contains your personal information, and has options to Change your password and Generate/Revoke your API Token.","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"If you don't already have an API Token generated, click the Generate link:","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"(Image: mPulse Account Settings Page showing where the API Token Generate and Revoke links are)","category":"page"},{"location":"apiToken.html#Step-4.-Copy-the-API-Token","page":"How to generate an mPulse API Token","title":"Step 4. Copy the API Token","text":"","category":"section"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"You should now have an API Token in the text field labelled API Token.  Copy this out and use it for the mPulseAPI.getRepositoryToken call.","category":"page"},{"location":"apiToken.html","page":"How to generate an mPulse API Token","title":"How to generate an mPulse API Token","text":"(Image: mPulse Account Settings Page showing a generated API Token)","category":"page"},{"location":"BeaconAPI.html#Sending-Beacons","page":"Sending Beacons","title":"Sending Beacons","text":"","category":"section"},{"location":"BeaconAPI.html","page":"Sending Beacons","title":"Sending Beacons","text":"mPulseAPI.jl uses the mPulse REST Beacon API to send beacons.","category":"page"},{"location":"BeaconAPI.html","page":"Sending Beacons","title":"Sending Beacons","text":"You first need to make a config request using mPulseAPI.getBeaconConfig and then include that config in your call to  mPulseAPI.sendBeacon along with other beacon parameters.","category":"page"},{"location":"BeaconAPI.html","page":"Sending Beacons","title":"Sending Beacons","text":"Beacon parameters may be named by label or name.","category":"page"},{"location":"BeaconAPI.html","page":"Sending Beacons","title":"Sending Beacons","text":"Modules = [mPulseAPI]\nPages = [\"BeaconAPI.jl\"]","category":"page"},{"location":"BeaconAPI.html#mPulseAPI.CONFIG_URL","page":"Sending Beacons","title":"mPulseAPI.CONFIG_URL","text":"Base URL for config.json requests\n\n\n\n\n\n","category":"constant"},{"location":"BeaconAPI.html#mPulseAPI.getBeaconConfig-Tuple{AbstractString, AbstractString}","page":"Sending Beacons","title":"mPulseAPI.getBeaconConfig","text":"Fetch beacon configuration for an mPulse APP using the Beacon API Caches the result for whatever is specified in Cache-control: max-age\n\n\n\n\n\n","category":"method"},{"location":"BeaconAPI.html#mPulseAPI.sendBeacon-Tuple{Dict, Dict}","page":"Sending Beacons","title":"mPulseAPI.sendBeacon","text":"Send a beacon to mPulse\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#Alerts-and-Anomaly-Detection-Models","page":"Alerts & Anomaly Detection Models","title":"Alerts & Anomaly Detection Models","text":"","category":"section"},{"location":"Alerts.html","page":"Alerts & Anomaly Detection Models","title":"Alerts & Anomaly Detection Models","text":"Modules = [mPulseAPI]\nPages = [\"Alert.jl\", \"StatisticalModel.jl\"]","category":"page"},{"location":"Alerts.html#mPulseAPI.deleteRepositoryAlert-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.deleteRepositoryAlert","text":"Deletes an Alert object from the mPulse repository\n\nAt least one of alertID or alertName must be passed in to delete the alert object.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nalertID::Int64 :    The ID of the alert to update.\n\nalertName::AbstractString :    The Alert name in mPulse. This is available from the mPulse domain configuration dialog.\n\nReturns\n\nReturns true if the delete is successful, else false.\n\nThrows\n\nArgumentError :    if token is empty or alertID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#mPulseAPI.getRepositoryAlert-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.getRepositoryAlert","text":"Fetches an Alert object from the mPulse repository\n\nAt least one of alertID or alertName must be passed in to identify the alert. If neither are passed in, then all alerts for the tenant are returned.\n\nThe alert will be cached in memory for 1 hour, so subsequent calls using a matching alertID return quickly without calling out to the API.  This can be a problem if the alert changes in the repository. You can clear the cache for this tenant using mPulseAPI.clearAlertCache and passing in alertID.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nalertID::Int64 :    The ID of the alert to fetch.\n\nalertName::AbstractString :    The Alert name in mPulse. This is available from the mPulse domain configuration dialog.\n\nReturns\n\n{Dict} The alert object with the following fields:\n\nhidden::Bool :    Flag indicating whether the alert is visible to the user\n\nparentID::Int64 :    The ID of the parent folder that this alert is in\n\npath::AbstractString :    The folder path that this alert is in\n\nreadOnly::Bool :    Flag indicating whether the alert is able to be edited\n\nname::AbstractString :    The alert's name\n\ntenantID::Int64 :    The ID of the tenant that the alert is in\n\ncreated::DateTime :    The timestamp when this object was created\n\nid::Int64 :    The ID of the alert.\n\ndescription::AbstractString :    The description of this alert entered into mPulse\n\nlastCached::DateTime :    The timestamp when this object was last cached\n\nbody::XMLElement :    An XML object representing the alert's XML definition or an empty node if you do not have permission to see the full alert\n\nreferences::Dict :    An array of Dicts with reference information such as name, id, type, and path.\n\nuid::AbstractString :    The encrypted uid associated with the alert\n\ndeleted::Bool :    Flag indicating whether the alert has been deleted\n\nownerID::Int64 :    The ID of the alert's owner\n\nattributes::Dict :    A Dict containing whether the alert is active, version number, and the time(s) that the alert was last cleared, triggered, and updated.\n\nlastModified::DateTime :    The timestamp when this object was created\n\nThrows\n\nArgumentError :    if token is empty or alertID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#mPulseAPI.postRepositoryAlert-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.postRepositoryAlert","text":"Updates an Alert object from the mPulse repository\n\nAt least one of alertID or alertName must be passed in to update the alert object.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nalertID::Int64 :    The ID of the alert to update.\n\nalertName::AbstractString :    The Alert name in mPulse. This is available from the mPulse domain configuration dialog.\n\nattributes::Dict :    A Dict of alert attributes to update\n\nobjectFields::Dict :    A Dict of alert object fields to update\n\nbody::AbstractString|LightXML.XMLElement=\"\" :    An XMLElement (if not empty) containing the body of the alert, containing pertinent information surrounding errors.\n\nReturns\n\n{Dict} The updated alert object with the following fields:\n\nhidden::Bool :    Flag indicating whether the alert is visible to the user\n\nparentID::Int64 :    The ID of the parent folder that this alert is in\n\npath::AbstractString :    The folder path that this alert is in\n\nreadOnly::Bool :    Flag indicating whether the alert is able to be edited\n\nname::AbstractString :    The alert's name\n\ntenantID::Int64 :    The ID of the tenant in which the alert is in\n\ncreated::DateTime :    The timestamp when this object was created\n\nid::Int64 :    The ID of the alert.\n\ndescription::AbstractString :    The description of this alert entered into mPulse\n\nlastCached::DateTime :    The timestamp when this object was last cached\n\nerrorXML::Union{AbstractString, LightXML.XMLElement} :    An XML object representing the alert's XML error definition to be updated by the repository.\n\nreferences::Dict :    An array of Dicts with reference information such as name, id, type, and path.\n\nuid::AbstractString :    The encrypted uid associated with the alert\n\ndeleted::Bool :    Flag indicating whether the alert has been deleted\n\nownerID::Int64 :    The ID of the alert's owner\n\nattributes::Dict :    A Dict containing whether the alert is active, version number, and the time(s) that the alert was last cleared, triggered, and updated.\n\nlastModified::DateTime :    The timestamp when this object was created\n\nThrows\n\nArgumentError :    if token is empty or alertID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#mPulseAPI.deleteRepositoryStatModel-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.deleteRepositoryStatModel","text":"Deletes an StatisticalModel object from the mPulse repository\n\nAt least one of statModelID or statModelName must be passed in to delete the Statistical Model object.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nstatModelID::Int64 :    The ID of the statistical model to update.\n\nstatModelName::AbstractString :    The statistical model name in mPulse. This is available from the mPulse domain configuration dialog.\n\nReturns\n\nReturns true if the delete is successful, else false.\n\nThrows\n\nArgumentError :    if token is empty or statModelID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#mPulseAPI.getRepositoryStatModel-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.getRepositoryStatModel","text":"Fetches an StatisticalModel object from the mPulse repository\n\nAt least one of statModelID or statModelName must be passed in to identify the statistical model.\n\nThe statistical model will be cached in memory for 1 hour, so subsequent calls using a matching statModelID return quickly without calling out to the API.  This can be a problem if the statistical model changes in the repository. You can clear the cache for this tenant using mPulseAPI.clearStatModelCache and passing in statModelID.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nstatModelID::Int64 :    The ID of the statistical model to update.\n\nstatModelName::AbstractString :    The statistical model name in mPulse. This is available from the mPulse domain configuration dialog.\n\nReturns\n\n{Dict} The statisticalmodel object with the following fields:\n\nhidden::Bool :    Flag indicating whether the statistical model is visible to the user\n\nparentID::Int64 :    The ID of the parent folder that this statistical model is in\n\npath::AbstractString :    The folder path that this statistical model is in\n\nreadOnly::Bool :    Flag indicating whether the statistical model is able to be edited\n\nname::AbstractString :    The statistical model's name\n\ntenantID::Int64 :    The ID of the tenant that the statistical model is in\n\ncreated::DateTime :    The timestamp when this object was created\n\nid::Int64 :    The ID of the statistical model.\n\ndescription::AbstractString :    The description of this statistical model entered into mPulse\n\nlastCached::DateTime :    The timestamp when this object was last cached\n\nbody::XMLElement :    An XML object representing the statistical model's XML definition or an empty node if you do not have permission to see the full statistical model\n\nreferences::Dict :    An array of Dicts with reference information such as name, id, type, and path.\n\nuid::AbstractString :    The encrypted uid associated with the statistical model\n\ndeleted::Bool :    Flag indicating whether the statistical model has been deleted\n\nownerID::Int64 :    The ID of the statistical model's owner\n\nattributes::Dict :    A Dict containing whether the statistical model is active, version number, and the time(s) that the statistical model was last cleared, triggered, and updated.\n\nlastModified::DateTime :    The timestamp when this object was created\n\nThrows\n\nArgumentError :    if token is empty or statModelID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html#mPulseAPI.postRepositoryStatModel-Tuple{AbstractString}","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.postRepositoryStatModel","text":"Updates an StatisticalModel object from the mPulse repository\n\nAt least one of statModelID or statModelName must be passed in to update the statistical model object.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\nstatModelID::Int64 :    The ID of the statistical model to update.\n\nstatModelName::AbstractString :    The statistical model name in mPulse. This is available from the mPulse domain configuration dialog.\n\nattributes::Dict :    A Dict of statistical model attributes to update\n\nobjectFields::Dict :    A Dict of statistical model object fields to update\n\nbody::AbstractString|LightXML.XMLElement=\"\" :    An XMLElement (if not empty) containing the body of the statistical model, containing pertinent information surrounding errors.\n\nReturns\n\n{Dict} The updated statistical model object with the following fields:\n\nhidden::Bool :    Flag indicating whether the statistical model is visible to the user\n\nparentID::Int64 :    The ID of the parent folder that this statistical model is in\n\npath::AbstractString :    The folder path that this statistical model is in\n\nreadOnly::Bool :    Flag indicating whether the statistical model is able to be edited\n\nname::AbstractString :    The statistical model's name\n\ntenantID::Int64 :    The ID of the tenant in which the statistical model is in\n\ncreated::DateTime :    The timestamp when this object was created\n\nid::Int64 :    The ID of the statistical model.\n\ndescription::AbstractString :    The description of this statistical model entered into mPulse\n\nlastCached::DateTime :    The timestamp when this object was last cached\n\nerrorXML::Union{AbstractString, LightXML.XMLElement} :    An XML object representing the alert's XML error definition to be updated by the repository.\n\nreferences::Dict :    An array of Dicts with reference information such as name, id, type, and path.\n\nuid::AbstractString :    The encrypted uid associated with the statistical model\n\ndeleted::Bool :    Flag indicating whether the statistical model has been deleted\n\nownerID::Int64 :    The ID of the statistical model's owner\n\nattributes::Dict :    A Dict containing whether the statistical model is active, version number, and the time(s) that the statistical model was last cleared, triggered, and updated.\n\nlastModified::DateTime :    The timestamp when this object was created\n\nThrows\n\nArgumentError :    if token is empty or statModelID is empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"Alerts.html","page":"Alerts & Anomaly Detection Models","title":"Alerts & Anomaly Detection Models","text":"mPulseAPI.clearAlertCache\nmPulseAPI.clearStatModelCache","category":"page"},{"location":"Alerts.html#mPulseAPI.clearAlertCache","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.clearAlertCache","text":"Expire an entry from the alert cache.  Use this if the alert has changed.\n\nKeyword Arguments\n\nalertID::Int64 :    The ID of the alert to expire.\n\nalertName::AbstractString :    The Alert name in mPulse.  This can be found from the mPulse alert configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"function"},{"location":"Alerts.html#mPulseAPI.clearStatModelCache","page":"Alerts & Anomaly Detection Models","title":"mPulseAPI.clearStatModelCache","text":"Expire an entry from the statistical model cache.  Use this if the model has changed.\n\nKeyword Arguments\n\nstatModelID::Int64 :    The ID of the statistical model to expire.\n\nstatModelName::AbstractString :    The statistical model name in mPulse.  This can be found from the mPulse statistical model configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"function"},{"location":"RepositoryAPI.html#RepositoryAPI","page":"RepositoryAPI","title":"RepositoryAPI","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"The RepositoryAPI performs all communication with the mPulse Repository. You use it first to authenticate, and then to create, modify, query, and delete objects from the mPulse Repository.","category":"page"},{"location":"RepositoryAPI.html#Connecting-to-the-Repository","page":"RepositoryAPI","title":"Connecting to the Repository","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"If using an alternate mPulse endpoint (for example, your dev system), you will first need to tell this module about your endpoint:","category":"page"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"mPulseAPI.setEndpoints","category":"page"},{"location":"RepositoryAPI.html#mPulseAPI.setEndpoints","page":"RepositoryAPI","title":"mPulseAPI.setEndpoints","text":"Change the mPulse API endpoint that we connect to.  The default is https://mpulse.soasta.com/concerto\n\nExample\n\nmPulseAPI.setEndpoints(\"https://mpulse-alt.soasta.com/concerto\")\n\n\n\n\n\n","category":"function"},{"location":"RepositoryAPI.html#Authenticate-with-the-Repository","page":"RepositoryAPI","title":"Authenticate with the Repository","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"To authenticate with the Repository, you will first need an API Token from mPulse. Once you have the API Token, you will call out to getRepositoryToken to authenticate and get a session token. This session token will be used for all subsequent calls to the Repository and Query APIs. The session token is valid until you sign out of mPulse.","category":"page"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"mPulseAPI.getRepositoryToken","category":"page"},{"location":"RepositoryAPI.html#mPulseAPI.getRepositoryToken","page":"RepositoryAPI","title":"mPulseAPI.getRepositoryToken","text":"Logs in to the mPulse repository and fetches an Authorization token that can be used for other calls\n\nThe token will be cached in memory for 5 hours, so subsequent calls using the same tenant will return quickly without calling out to the API.  This can be a problem if the account has signed in from a different location or is logged out of mPulse.  You can clear the cache for this token using mPulseAPI.clearTokenCache\n\nArguments\n\ntenant::AbstractString :    The name of the tenant to log in to. The token will be bound to this tenant.\n\napiToken::AbstractString :    The apiToken issued by mPulse that allows authenticating with the API. If you've      previously authenticated with this tenant, the apiToken will be cached and does      not need to be passed in again\n\nReturns\n\n{ASCIIString} The mPulse Repository Auth token which may be used in the X-Auth-Token header for subsequent API calls\n\nThrows\n\nArgumentError :    if the tenant or apiToken are empty\n\nmPulseAPIAuthException :    if authentication failed for some reason\n\n\n\n\n\n","category":"function"},{"location":"RepositoryAPI.html#Communicating-with-the-Repository","page":"RepositoryAPI","title":"Communicating with the Repository","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"This module provides wrappers for the tenant, domain, alert and statisticalmodel object types. While you can only fetch Tenant & Domain (aka Application) details using this API, you can do more with Alerts.","category":"page"},{"location":"RepositoryAPI.html#Tenants,-Domains-and-Applications","page":"RepositoryAPI","title":"Tenants, Domains & Applications","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"Modules = [mPulseAPI]\nPages = [\"Tenant.jl\", \"Domain.jl\", \"xml_utilities.jl\"]","category":"page"},{"location":"RepositoryAPI.html#mPulseAPI.getRepositoryTenant-Tuple{AbstractString}","page":"RepositoryAPI","title":"mPulseAPI.getRepositoryTenant","text":"Fetches a Tenant object from the mPulse repository\n\nAt least one of tenantID or name must be passed in to identify the tenant.\n\nThe tenant will be cached in memory for 1 hour, so subsequent calls using a matching tenantID, or name return quickly without calling out to the API.  This can be a problem if the tenant changes in the repository. You can clear the cache for this tenant using mPulseAPI.clearTenantCache and passing in one of tenantID or name.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\ntenantID::Int64 :    The ID of the tenant to fetch.  This is the fastest method, but it can be hard to figure out a tenant's ID\n\nname::AbstractString :    The Tenant name in mPulse.  This is available from the mPulse tenant list.\n\nReturns\n\n{Dict} The tenant object with the following fields:\n\nname::AbstractString :    The tenant's name\n\nid::Int64 :    The tenant's ID\n\nbody::XMLElement :    An XML object representing the tenant's XML definition or an empty node if you do not have permission to see the full tenant\n\nparentID::Int64 :    The ID of the parent folder that this tenant is in\n\nparentType::AbstractString :    The type of parent object (typically tenantFolder)\n\npath::AbstractString :    The folder path that this tenant is in\n\ndescription::AbstractString :    The description of this tenant entered into mPulse\n\ncreated::DateTime :    The timestamp when this object was created\n\nlastModified::DateTime :    The timestamp when this object was created\n\nattributes::Dict :    A Dict of attributes for this tenant\n\ndswbUrls::Array{AbstractString} :    An array of DSWB URLs that are valid auth redirect targets for this tenant\n\nThrows\n\nArgumentError :    if token is empty or tenantID and name are both empty\n\nmPulseAPIException :    if API access failed for some reason\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.getCustomMetricMap-Tuple{Any}","page":"RepositoryAPI","title":"mPulseAPI.getCustomMetricMap","text":"Gets a mapping of custom metric names to database field names from domain XML.  This list also includes valid dates.\n\nArguments\n\nbody::{AbstractString|XMLElement|Dict} :    This is an object containing the domain XML returned by mPulseAPI.getRepositoryDomain.  It may be:\n\nAn AbstractString containing the domain XML.  This will be parsed.\nA LightXML.XMLElement pointing to the root node of the domain XML.\nA Dict with a body element. This is the domain object returned by mPulseAPI.getRepositoryDomain.\n\nReturns\n\n{Dict} of Custom Metric names mapped to database fieldnames with the following structure:\n\nDict(\n    <metric name> => Dict(\n        \"index\"        => <index>,                      # Numeric index\n        \"fieldname\"    => \"custommetric<index>\",        # Field name in dswb tables\n        \"lastModified\" => <lastModifiedDate>,\n        \"description\"  => \"<description>\",\n        \"dataType\"     => Dict(\n            \"decimalPlaces\"  => \"2\",\n            \"type\"           => \"<metric type>\",\n            \"currencyCode\"   => \"<ISO 4217 Currency Code if type==Currency>\"\n        ),\n        \"colors\"       => [<array of color HEX codes>]\n    ),\n    ...\n)\n\nThrows\n\nArgumentError :    if the data type of body is unknown.\n\nLightXML.XMLParseError :    if body is an AbstractString but contains invalid XML\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.getCustomTimerMap-Tuple{Any}","page":"RepositoryAPI","title":"mPulseAPI.getCustomTimerMap","text":"Gets a mapping of custom timer names to database field names from domain XML.  This list also includes valid dates.\n\nArguments\n\nbody::{AbstractString|XMLElement|Dict} :    This is an object containing the domain XML returned by mPulseAPI.getRepositoryDomain.  It may be:\n\nAn AbstractString containing the domain XML.  This will be parsed.\nA LightXML.XMLElement pointing to the root node of the domain XML.\nA Dict with a body element. This is the domain object returned by mPulseAPI.getRepositoryDomain.\n\nReturns\n\n{Dict} of Custom Timer names mapped to database fieldnames with the following structure:\n\nDict(\n    <timer name> => Dict(\n        \"index\"         => <index>,                      # Numeric index\n        \"fieldname\"     => \"customtimer<index>\",         # Field name in dswb tables\n        \"mpulseapiname\" => \"CustomTimer<index>\",\n        \"lastModified\"  => <lastModifiedDate>,\n        \"description\"   => \"<description>\",\n        \"colors\"        => Array(\n            Dict(\n                \"timingType\"  => \"<seconds | milliseconds>\",\n                \"timingStart\" => \"<start timer value for this colour range>\",\n                \"timingEnd\"   => \"<end timer value for this colour range>\",\n                \"colorStart\"  => \"<start of this color range>\",\n                \"endStart\"    => \"<end of this color range>\"\n            ),\n            ...\n        )\n    ),\n    ...\n)\n\nThrows\n\nArgumentError :    if the data type of body is unknown.\n\nLightXML.XMLParseError :    if body is an AbstractString but contains invalid XML\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.getRepositoryDomain-Tuple{AbstractString}","page":"RepositoryAPI","title":"mPulseAPI.getRepositoryDomain","text":"Fetches a Domain object from the mPulse repository\n\nTo fetch a single domain, at least one of domainID, appKey or appName must be passed in to identify the domain. If none of these are passed in, then all domains that are readable by the specified token will be returned as an array.\n\nThe domain will be cached in memory for 1 hour, so subsequent calls using a matching domainID, appKey or appName return quickly without calling out to the API.  This can be a problem if the domain changes in the repository. You can clear the cache for this domain using mPulseAPI.clearDomainCache and passing in one of domainID, appKey or appName.\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling getRepositoryToken\n\nKeyword Arguments\n\ndomainID::Int64 :    The ID of the domain to fetch.  This is the fastest method, but it can be hard to figure out a domain's ID\n\nappKey::AbstractString :    The App Key (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.\n\nappName::AbstractString :    The App name in mPulse. This is available from the mPulse domain configuration dialog.\n\nReturns\n\n{Dict|Array{Dict}} If one of domainID, appKey or appName are passed in, then a single domain object is returned as a Dict.\n\nIf none of these are passed in, then an array of all domains is returned, each is a Dict.\n\nThe domain Dict has the following fields:\n\nname :    The app's name\n\nid::Int64 :    The app's ID\n\nbody::XMLElement :    An XML object representing the app's XML definition\n\ntenantID::Int64 :    The ID of the tenant that this app is in\n\ndescription::AbstractString :    The description of this app entered into mPulse\n\ncreated::DateTime :    The timestamp when this object was created\n\nlastModified::DateTime :    The timestamp when this object was created\n\nattributes::Dict :    A Dict of attributes for this app, including its AppKey\n\ncustom_metrics::Dict :    A {Dict} of Custom Metric names mapped to database fieldnames with the following structure:\n\nDict(\n    <metric name> => Dict(\n        \"index\"        => <index>,                      # Numeric index\n        \"fieldname\"    => \"custommetric<index>\",        # Field name in dswb tables\n        \"lastModified\" => <lastModifiedDate>,\n        \"description\"  => \"<description>\",\n        \"dataType\"     => Dict(\n            \"decimalPlaces\"  => \"2\",\n            \"type\"           => \"<metric type>\",\n            \"currencyCode\"   => \"<ISO 4217 Currency Code if type==Currency>\"\n        ),\n        \"colors\"       => [<array of color HEX codes>]\n    ),\n    ...\n)\n\ncustom_timers::Dict :    A {Dict} of Custom Timer names mapped to database fieldnames with the following structure:\n\nDict(\n    <timer name> => Dict(\n        \"index\"         => <index>,                      # Numeric index\n        \"fieldname\"     => \"customtimer<index>\",         # Field name in dswb tables\n        \"mpulseapiname\" => \"CustomTimer<index>\",\n        \"lastModified\"  => <lastModifiedDate>,\n        \"description\"   => \"<description>\",\n        \"colors\"        => Array(\n            Dict(\n                \"timingType\"  => \"<seconds | milliseconds>\",\n                \"timingStart\" => \"<start timer value for this colour range>\",\n                \"timingEnd\"   => \"<end timer value for this colour range>\",\n                \"colorStart\"  => \"<start of this color range>\",\n                \"endStart\"    => \"<end of this color range>\"\n            ),\n            ...\n        )\n    ),\n    ...\n)\n\nsession_timeout::Int64 :    The session timeout value in minutes\n\nresource_timing::Bool :    Flag indicating whether resource timing collection is enabled or not\n\nvertical_market::AbstractString :    The vertical market that this domain belongs to\n\nThrows\n\nArgumentError :    if token is empty or domainID, appKey and appName are all empty\n\nmPulseAPIException :    if API access failed for some reason\n\nException :    if something unexpected happened while parsing the repository object\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.getNodeContent-Tuple{Any, AbstractString, Any}","page":"RepositoryAPI","title":"mPulseAPI.getNodeContent","text":"Gets the content of a node\n\nArguments\n\nbody::{AbstractString|XMLElement|Dict} :    This is an object containing the domain XML returned by mPulseAPI.getRepositoryDomain.  It may be:\n\nAn AbstractString containing the domain XML.  This will be parsed.\nA LightXML.XMLElement pointing to the root node of the domain XML.\nA Dict with a body element. This is the domain object returned by mPulseAPI.getRepositoryDomain.\n\nnodeName::AbstractString :    The node whose contents shoudl be returned\n\ndefault::Any :    A default value to return if the required node was not found\n\nReturns\n\n{AbstractString|Number|Boolean} The content of the requested node cast to the same type as default or the value of default if the node was not found\n\nThrows\n\nArgumentError :    if the data type of body is unknown.\n\nLightXML.XMLParseError :    if body is an AbstractString but contains invalid XML\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"mPulseAPI.clearTenantCache\nmPulseAPI.clearDomainCache","category":"page"},{"location":"RepositoryAPI.html#mPulseAPI.clearTenantCache","page":"RepositoryAPI","title":"mPulseAPI.clearTenantCache","text":"Expire an entry from the tenant cache.  Use this if the tenant has changed.\n\nKeyword Arguments\n\ntenantID::Int64 :    The ID of the tenant to expire.\n\nname::AbstractString :    The Tenant name in mPulse.  This is got from the mPulse domain configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"function"},{"location":"RepositoryAPI.html#mPulseAPI.clearDomainCache","page":"RepositoryAPI","title":"mPulseAPI.clearDomainCache","text":"Expire an entry from the domain cache.  Use this if the domain has changed.\n\nKeyword Arguments\n\ndomainID::Int64 :    The ID of the domain to expire.\n\nappKey::AbstractString :    The App Key (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.\n\nappName::AbstractString :    The App name in mPulse.  This can be got from the mPulse domain configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"function"},{"location":"RepositoryAPI.html#Alerts-and-Anomaly-Detection","page":"RepositoryAPI","title":"Alerts & Anomaly Detection","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"See the page on Alerts & Anomaly Detection Models for more details.","category":"page"},{"location":"RepositoryAPI.html#Other-Object-Types","page":"RepositoryAPI","title":"Other Object Types","text":"","category":"section"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"To interact with other object types, you will need to use the following sparsely documented internal methods:","category":"page"},{"location":"RepositoryAPI.html","page":"RepositoryAPI","title":"RepositoryAPI","text":"Modules = [mPulseAPI]\nOrder = [:function]\nPrivate = false\nPages = [\"RepositoryAPI.jl\"]","category":"page"},{"location":"RepositoryAPI.html#mPulseAPI.deleteRepositoryObject-Tuple{AbstractString, AbstractString, Dict{Symbol, Any}}","page":"RepositoryAPI","title":"mPulseAPI.deleteRepositoryObject","text":"Internal convenience function.  Deletes an object from the repository.\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.getRepositoryObject-Tuple{AbstractString, AbstractString, Dict{Symbol, Any}}","page":"RepositoryAPI","title":"mPulseAPI.getRepositoryObject","text":"Internal convenience function.  Fetches an object from the repository and caches it for an hour in the appropriate cache object\n\nReturns a single object if searchKeys are passed in an filterRequired is set to true (default)\nReturns an array of objects if searchKeys are not passed in and filterRequired is set to false\nThrows an exception if searchKeys are not passed in and filterRequired is set to true\n\n\n\n\n\n","category":"method"},{"location":"RepositoryAPI.html#mPulseAPI.postRepositoryObject-Tuple{AbstractString, AbstractString, Dict{Symbol, Any}}","page":"RepositoryAPI","title":"mPulseAPI.postRepositoryObject","text":"Internal convenience function.  Updates an object from the repository.\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#QueryAPI","page":"QueryAPI","title":"QueryAPI","text":"","category":"section"},{"location":"QueryAPI.html","page":"QueryAPI","title":"QueryAPI","text":"Modules = [mPulseAPI]\nPages = [\"QueryAPI.jl\"]","category":"page"},{"location":"QueryAPI.html#mPulseAPI.getABTestTimers-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getABTestTimers","text":"Calls the ab-tests endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nfriendly_names::Bool=false :    Specify whether column names in the DataFrame should be human friendly or developer friendly (default)\n\nHuman friendly column names are:\n\nTest Name, Median Time (ms), MoE (ms), Measurements, % of total\n\nDeveloper friendly column names are:\n\n:test_name, :t_done_median, :t_done_moe, :t_done_count, :t_done_total_pc\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had  data in an unexpected data type\n\nReturns\n\n{DataFrame} A Julia DataFrame with the following columns:\n\ntest_name, t_done_median, t_done_moe, t_done_count, and t_done_total_pc\n\njulia> pgroups = mPulseAPI.getABTestTimers(token, appKey)\n69x5 DataFrames.DataFrame\n| Row | test_name                   | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | (No Value)                  | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Test-A                      | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Test-B                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | BlueHead                    | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Campaign-XXX                | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | Old-Site                    | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Slow-SRP                    | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getAPIResults-Tuple{AbstractString, AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getAPIResults","text":"Get API results from the mPulse Query API\n\nThis method is a generic catch-all that queries the mPulse API and returns results as a Julia data structure matching the JSON structure of the specified API call\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nquery_type::AbstractString :    The specific API query to make.  Must be one of the following:\n\nsummary\nhistogram\nsessions-per-page-load-time\nmetric-per-page-load-time\nby-minute\ngeography\npage-groups\nbrowsers\nbandwidth\nab-tests\ntimers-metrics\nmetrics-by-dimension\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nArgumentError :   If the query_type is not recognized\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nReturns\n\n{Any} A Julia representation of the JSON returned by the API call. Convenience wrappers in this library may return more appropriate data structures.\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getBrowserTimers-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getBrowserTimers","text":"Calls the browsers endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nfriendly_names::Bool=false :    Specify whether column names in the DataFrame should be human friendly or developer friendly (default)\n\nHuman friendly column names are:\n\nUser Agent, Median Time (ms), MoE (ms), Measurements, % of total\n\nDeveloper friendly column names are:\n\n:user_agent, :t_done_median, :t_done_moe, :t_done_count, :t_done_total_pc\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had  data in an unexpected data type\n\nReturns\n\n{DataFrame} A Julia DataFrame with the following columns:\n\nuser_agent, t_done_median, t_done_moe, t_done_count, and t_done_total_pc\n\njulia> pgroups = mPulseAPI.getBrowserTimers(token, appKey)\n69x5 DataFrames.DataFrame\n| Row | user_agent                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | Chrome/50                   | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Safari/9                    | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Mobile Safari/9             | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | Firefox/46                  | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Chrome/49                   | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | IE/11                       | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Edge/13                     | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getGeoTimers-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getGeoTimers","text":"Calls the geography endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nfriendly_names::Bool=false :    Specify whether column names in the DataFrame should be human friendly or developer friendly (default)\n\nHuman friendly column names are:\n\nCountry, Median Time (ms), MoE (ms), Measurements, % of total\n\nDeveloper friendly column names are:\n\n:country, :t_done_median, :t_done_moe, :t_done_count, :t_done_total_pc\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had  data in an unexpected data type\n\nReturns\n\n{DataFrame} A Julia DataFrame with the following columns:\n\ncountry, t_done_median, t_done_moe, t_done_count, and t_done_total_pc\n\njulia> pgroups = mPulseAPI.getCountryTimers(token, appKey)\n69x5 DataFrames.DataFrame\n| Row | country                     | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | US                          | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | CA                          | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | MX                          | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | PH                          | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | AU                          | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | KR                          | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | PE                          | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getHistogram-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getHistogram","text":"Calls the histogram endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had a missing series element or data in an unexpected data type\n\nReturns\n\n{Dict} A Julia Dict with the following string keys:\n\nmedian::Int :   The median value for values in the histogram in milliseconds\n\np95::Int :   The 95th percentile value for values in the histogram in milliseconds\n\np98::Int :   The 98th percentile value for values in the histogram in milliseconds\n\nbuckets::DataFrame :   Buckets for the histogram.  These buckets are variable width. See below for a description.\n\njulia> histo = mPulseAPI.getHistogram(token, appKey)\nDict{AbstractString,Any} with 4 entries:\n  \"median\"  => 3439\n  \"p95\"     => 12843\n  \"p98\"     => 22816\n  \"buckets\" => 117x3 DataFrames.DataFrame…\n\nThe buckets DataFrame has the following columns: :bucket_start, :bucket_end, :element_count\n\njulia> histo[\"buckets\"]\n117x3 DataFrames.DataFrame\n| Row | bucket_start | bucket_end | element_count |\n|-----|--------------|------------|---------------|\n| 1   | 1            | 2          | 1             |\n| 2   | 3            | 4          | 3             |\n| 3   | 4            | 5          | 8             |\n| 4   | 5            | 6          | 7             |\n| 5   | 6            | 7          | 9             |\n| 6   | 7            | 8          | 8             |\n| 7   | 8            | 9          | 14            |\n| 8   | 9            | 10         | 13            |\n| 9   | 10           | 11         | 17            |\n| 10  | 11           | 12         | 15            |\n| 11  | 12           | 13         | 19            |\n| 12  | 13           | 14         | 18            |\n| 13  | 14           | 15         | 19            |\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getMetricOverPageLoadTime-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getMetricOverPageLoadTime","text":"Calls the metric-per-page-load-time endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nmetric::AbstractString :    The name of the metric that we want data for.  If not specified, defaults to BounceRate\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a metric\n\nmPulseAPIResultFormatException :    If the API response had a missing series element or data in an unexpected data type\n\nReturns\n\n{DataFrame} A julia DataFrame mapping the Metric to a load time bucket:\n\njulia> mPulseAPI.getMetricOverPageLoadTime(token, appKey)\n60x2 DataFrames.DataFrame\n| Row | t_done | BounceRate |\n|-----|--------|------------|\n| 1   | 210    | missing      |\n| 2   | 300    | 100.0      |\n| 3   | 400    | missing      |\n| 4   | 500    | 68.57      |\n| 5   | 550    | 12.65      |\n| 6   | 600    | 71.08      |\n| 7   | 700    | 68.57      |\n| 8   | 800    | 14.51      |\n| 9   | 900    | 20.83      |\n| 10  | 1050   | 24.58      |\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getMetricsByDimension-Tuple{AbstractString, AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getMetricsByDimension","text":"Calls the metrics-by-dimension endpoint of the mPulse REST API with the passed in dimension name and filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\ndimension::AbstractString :    The dimension to split metrics by.  The response contains one row for each value of this dimension.  The following dimensions are supported:\n\npage_group\nbrowser\ncountry\nbw_block\nab_test\n\nSee https://techdocs.akamai.com/mpulse/reference/get-metrics-by-dimension for an up-to-date list.\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had  data in an unexpected data type\n\nReturns\n\n{DataFrame} A Julia DataFrame with the following columns: :<dimension>, :<CustomMetric Name>...\n\njulia> mPulseAPI.getMetricsByDimension(token, appKey, \"browser\")\n243x4 DataFrames.DataFrame\n| Row | browser                          | Conversion | OrderTotal | ServerDown  |\n|-----|----------------------------------|------------|------------|-------------|\n| 1   | \"Mobile Safari/9\"                | 1.381      | 1.62854e7  | 0.000994956 |\n| 2   | \"Chrome/50\"                      | 1.98411    | 3.13401e7  | 0.0050615   |\n| 3   | \"Safari/9\"                       | 3.08288    | 2.10698e7  | 0.00561545  |\n| 4   | \"Firefox/46\"                     | 1.90974    | 8569362    | 0.00462406  |\n| 5   | \"Mobile Safari/8\"                | 2.38545    | 2295848    | 0.0         |\n| 6   | \"Chrome/49\"                      | 2.22828    | 4394331    | 0.0         |\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getPageGroupTimers-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getPageGroupTimers","text":"Calls the page-groups endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nfriendly_names::Bool=false :    Specify whether column names in the DataFrame should be human friendly or developer friendly (default)\n\nHuman friendly column names are:\n\nPage Group, Median Time (ms), MoE (ms), Measurements, % of total\n\nDeveloper friendly column names are:\n\n:page_group, :t_done_median, :t_done_moe, :t_done_count, :t_done_total_pc\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nmPulseAPIResultFormatException :    If the API response had  data in an unexpected data type\n\nReturns\n\n{DataFrame} A Julia DataFrame with the following columns:\n\npage_group, t_done_median, t_done_moe, t_done_count, and t_done_total_pc\n\njulia> pgroups = mPulseAPI.getPageGroupTimers(token, appKey)\n69x5 DataFrames.DataFrame\n| Row | page_group                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | www                         | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | blog                        | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Search                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | SKU                         | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | PLU                         | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | (No Page Group)             | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Checkout                    | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getSessionsOverPageLoadTime-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getSessionsOverPageLoadTime","text":"Calls the sessions-per-page-load-time endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nReturns\n\n{DataFrame} A julia DataFrame mapping the Sessions to a load time bucket:\n\njulia> mPulseAPI.getSessionsOverPageLoadTime(token, appKey)\n60x2 DataFrames.DataFrame\n| Row | t_done | Sessions   |\n|-----|--------|------------|\n| 1   | 210    | 72         |\n| 2   | 300    | 36         |\n| 3   | 400    | 72         |\n| 4   | 500    | 30         |\n| 5   | 550    | 66         |\n| 6   | 600    | 464        |\n| 7   | 700    | 30         |\n| 8   | 800    | 749        |\n| 9   | 900    | 709        |\n| 10  | 1050   | 1246       |\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getSummaryTimers-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getSummaryTimers","text":"Calls the summary endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nReturns\n\n{Dict} A Julia Dict with the following string keys:\n\nn::Int :   The number of beacons with data about the requested timer\n\nmedian::Int :   The median of the requested timer in milliseconds\n\np95::Int :   The 95th percentile value of the requested timer in milliseconds\n\np98::Int :   The 98th percentile value of the requested timer in milliseconds\n\nmoe::Float :   The 95% confidence interval margin of error on the arithmetic mean of the requested timer in milliseconds\n\nExamples\n\njulia> summary = mPulseAPI.getSummaryTimers(token, appKey)\n\nDict{Any,Any} with 5 entries:\n  \"n\"      => 356317\n  \"median\" => 3094\n  \"p95\"    => 19700\n  \"p98\"    => 40678\n  \"moe\"    => 13.93\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getTimerByMinute-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getTimerByMinute","text":"Calls the by-minute endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\ntimer::AbstractString :    The name of the timer whose data we want.  If not specified, defaults to PageLoad.  Other possible      values are:\n\n * PageLoad\n * DNS\n * TCP\n * SSL\n * FirstByte\n * DomLoad\n * DomReady\n * FirstLastByte\n * <all custom timers>\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a timer\n\nmPulseAPIResultFormatException :    If the API response had a missing series element or data in an unexpected data type\n\nReturns\n\n{DataFrame} A julia DataFrame containing timeseries data for the median value of the timer and its margin of error. The fields are: :timestamp in milliseconds since the UNIX epoch, :<TimerName> in milliseconds and :moe in milliseconds.\n\njulia> data = mPulseAPI.getTimerByMinute(token, appKey, timer=\"PageLoad\")\n1440x3 DataFrames.DataFrame\n| Row  | timestamp     | PageLoad | moe  |\n|------|---------------|----------|------|\n| 1    | 1463452800000 | 3679     | 135  |\n| 2    | 1463452860000 | 3731     | 202  |\n| 3    | 1463452920000 | 3706     | 116  |\n| 4    | 1463452980000 | 3911     | 171  |\n| 5    | 1463453040000 | 3757     | 181  |\n| 6    | 1463453100000 | 3729     | 174  |\n| 7    | 1463453160000 | 3779     | 174  |\n| 8    | 1463453220000 | 3916     | 182  |\n\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.getTimersMetrics-Tuple{AbstractString, AbstractString}","page":"QueryAPI","title":"mPulseAPI.getTimersMetrics","text":"Calls the timers-metrics endpoint of the mPulse REST API with the passed in filters\n\nArguments\n\ntoken::AbstractString :    The Repository authentication token fetched by calling mPulseAPI.getRepositoryToken\n\nappKey::AbstractString :    The App Key (formerly known as API key) for the app to query.  If you don't know the App Key, use      mPulseAPI.getRepositoryDomain to fetch a domain and then inspect domain[\"attributes\"][\"appKey\"]\n\nKeyword Arguments\n\nfilters::Dict :    A dict of filters to pass to the mPulse Query API. For example Dict(\"page-group\" => \"foo-bar\")      will filter results to the foo-bar page-group.  The resulting filters will be a merge of      what is passed in and the default values with whatever is passed in taking precedence.\n\nThe default filters are:\n\nDict(\n    \"date-comparator\" => \"Last24Hours\",\n)\n\nThe date-start and date-end filters accept a DateTime object while the date filter accepts a Date object.\n\nIf you'd like to use a ZonedDateTime, pass in its utc_datetime field:\n\nfilters = Dict(\n    \"date-comparator\" => \"Between\",\n    \"date-start\"      => ZonedDateTime(2016, 10, 19, 4, 30, TimeZone(\"America/New_York\")).utc_datetime,\n    \"date-end\"        => DateTime(2016, 10, 19, 16, 30)\n)\n\nTo pass multiple values for a single filter, use an array:\n\nfilters = Dict(\n    \"beacon-type\" => [\"page view\", \"xhr\", \"spa\", \"spa_hard\"],\n    \"page-group\"  => [\"product\", \"search\"]\n)\n\nThrows\n\nmPulseAPIAuthException :   If the token is invalid or has expired.\n\nmPulseAPIException :   If the API returned a non-200 status.  Inspect mPulseAPIException.response for details about     the problem\n\nmPulseAPIRequestException :   If the API was unhappy with a request parameter\n\nException :    If there was an unexpected type error parsing response values\n\nReturns\n\n{DataFrame} A DataFrame with one column for each timer and metric.  Known columns include:\n\n:Beacons and :PageLoad will always be present.\n:Sessions and :BounceRate will be present if session tracking is enabled (on by default)\n:DNS, :TCP, :SSL, :FirstByte, :DomLoad, :DomReady and :FirstLastByte will be present if NavigationTiming is available (almost always available)\nCustom Timers & Custom Metrics are included if defined and if they have data for the selected time period\n\nThe last row in the DataFrame is the latest value of the timer or metric.  All preceding rows are historic values over the time period broken down by a predefined time unit. For example, for Last24Hours, there will be 1440 entries representing each minute in the 24 hour period.\n\njulia> mPulseAPI.getTimersMetrics(token, appKey)\n1441x16 DataFrames.DataFrame\n| Row  | PageLoad | DNS | DomLoad | DomReady | FirstByte | SSL | FirstLastByte | TCP | DOM Interactive | Sessions | BounceRate | Conversion | OrderTotal | Beacons |\n|------|----------|-----|---------|----------|-----------|-----|---------------|-----|-----------------|----------|------------|------------|------------|---------|\n| 1    | 3442     │ 46  │ 805     │ 3345     │ 732       │ 59  │ 2468          │ 36  │ 1696            │ 353      │ 34         │ 0.566572   │ 58652.0    │ 1808    │\n| 2    | 3308     | 45  | 758     | 3173     | 705       | 56  | 2351          | 32  | 1620            | 331      | 30         | 2.1148     | 266219.0   | 1767    |\n| 3    | 3412     | 38  | 794     | 3287     | 726       | 69  | 2360          | 31  | 1707            | 346      | 29         | 1.44509    | 209205.0   | 1806    |\n| 4    | 3368     | 40  | 775     | 3250     | 701       | 51  | 2500          | 34  | 1670            | 354      | 32         | 2.25989    | 47354.0    | 1850    |\n| 5    | 3346     | 37  | 754     | 3222     | 691       | 61  | 2516          | 31  | 1624            | 326      | 30         | 2.76074    | 132915.0   | 1742    |\n| 6    | 3162     | 36  | 729     | 3040     | 665       | 86  | 2283          | 30  | 1611            | 382      | 28         | 1.57068    | 117284.0   | 1803    |\n| 7    | 3453     | 39  | 862     | 3320     | 787       | 64  | 2471          | 32  | 1772            | 356      | 33         | 2.52809    | 108045.0   | 1727    |\n| 8    | 3593     | 46  | 1028    | 3491     | 889       | 92  | 2495          | 33  | 1952            | 314      | 33         | 1.27389    | 150020.0   | 1715    |\n\n\n\n\n\n","category":"method"},{"location":"QueryAPI.html#mPulseAPI.mergeMetrics-Tuple{DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N}","page":"QueryAPI","title":"mPulseAPI.mergeMetrics","text":"Merge multiple similar DataFrames into a single DataFrame\n\nUse this method to merge the results from multiple calls to getMetricOverPageLoadTime() and getSessionsOverPageLoadTime(). All passed in DataFrames MUST contain a :t_done column.\n\nArguments\n\ndf1::DataFrame :    The first DataFrame in the collection.  This method requires at least one DataFrame to be passed in.\n\ndf2::DataFrame... :    One or more DataFrame to be merged together with the first one\n\nKeyword Arguments\n\nkeyField::Symbol=:t_done :    The column name to join on.  Defaults to :t_done\n\njoinType::Symbol=:outer :    The type of join to perform.  Could be :inner, :outer, :left, :right, :cross.\n\nThrows\n\nKeyError :    if the keyField column does not exist in all passed in DataFrames\n\nReturns\n\nIf only one DataFrame is passed in, it is returned as-is.  This is not a copy of the first DataFrame.\nIf multiple DataFrames are passed in, they are merged using an outer join on the keyField column, and the resulting DataFrame is returned. Since we perform an outer join, rows in any of the DataFrames that do not have a matching keyField value found in other DataFrames will be filled with missing\n\njulia> sessions   = mPulseAPI.getSessionsOverPageLoadTime(token, appKey);\njulia> bouncerate = mPulseAPI.getMetricOverPageLoadTime(token, appKey);\njulia> conversion = mPulseAPI.getMetricOverPageLoadTime(token, appKey, metric=\"Conversion\");\n\njulia> mPulseAPI.mergeMetrics(sessions, bouncerate, conversion)\n65x4 DataFrames.DataFrame\n| Row | t_done | Sessions | BounceRate | Conversion |\n|-----|--------|----------|------------|------------|\n| 1   | 6      | 1        | missing    | missing    |\n| 2   | 10     | 2        | 50.0       | missing    |\n| 3   | 12     | 2        | 100.0      | missing    |\n| 4   | 17     | 1        | 100.0      | missing    |\n| 5   | 30     | 1        | 100.0      | missing    |\n| 6   | 34     | 1        | missing    | missing    |\n| 7   | 40     | 1        | 100.0      | missing    |\n| 8   | 60     | 2        | 100.0      | missing    |\n| 9   | 70     | 1        | 100.0      | missing    |\n| 10  | 120    | 2        | 100.0      | missing    |\n| 11  | 140    | 1        | missing    | missing    |\n| 12  | 170    | 1        | missing    | missing    |\n| 13  | 190    | 1        | 100.0      | missing    |\n| 14  | 230    | 1        | missing    | missing    |\n...\n| 44  | 3750   | 8332     | 29.5915    | 2.25043    |\n| 45  | 3950   | 7957     | 31.7591    | 2.08962    |\n| 46  | 4200   | 7342     | 34.9953    | 2.02302    |\n| 47  | 4500   | 6783     | 37.0922    | 1.59947    |\n| 48  | 4800   | 6140     | 40.2336    | 1.67129    |\n| 49  | 5100   | 5530     | 42.2393    | 1.32839    |\n\n\n\n\n\n","category":"method"},{"location":"caching.html#Object-caching","page":"Object caching","title":"Object caching","text":"","category":"section"},{"location":"caching.html","page":"Object caching","title":"Object caching","text":"This module caches the results of GET requests to the mPulse REST API to improve performance. You can manipulate this cache using the following methods.","category":"page"},{"location":"caching.html","page":"Object caching","title":"Object caching","text":"Modules = [mPulseAPI]\nOrder = [:function]\nPublic = false\nPages = [\"cache_utilities.jl\"]","category":"page"},{"location":"caching.html#mPulseAPI.clearAlertCache-Tuple{}","page":"Object caching","title":"mPulseAPI.clearAlertCache","text":"Expire an entry from the alert cache.  Use this if the alert has changed.\n\nKeyword Arguments\n\nalertID::Int64 :    The ID of the alert to expire.\n\nalertName::AbstractString :    The Alert name in mPulse.  This can be found from the mPulse alert configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"method"},{"location":"caching.html#mPulseAPI.clearDomainCache-Tuple{}","page":"Object caching","title":"mPulseAPI.clearDomainCache","text":"Expire an entry from the domain cache.  Use this if the domain has changed.\n\nKeyword Arguments\n\ndomainID::Int64 :    The ID of the domain to expire.\n\nappKey::AbstractString :    The App Key (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.\n\nappName::AbstractString :    The App name in mPulse.  This can be got from the mPulse domain configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"method"},{"location":"caching.html#mPulseAPI.clearStatModelCache-Tuple{}","page":"Object caching","title":"mPulseAPI.clearStatModelCache","text":"Expire an entry from the statistical model cache.  Use this if the model has changed.\n\nKeyword Arguments\n\nstatModelID::Int64 :    The ID of the statistical model to expire.\n\nstatModelName::AbstractString :    The statistical model name in mPulse.  This can be found from the mPulse statistical model configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"method"},{"location":"caching.html#mPulseAPI.clearTenantCache-Tuple{}","page":"Object caching","title":"mPulseAPI.clearTenantCache","text":"Expire an entry from the tenant cache.  Use this if the tenant has changed.\n\nKeyword Arguments\n\ntenantID::Int64 :    The ID of the tenant to expire.\n\nname::AbstractString :    The Tenant name in mPulse.  This is got from the mPulse domain configuration dialog.\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"method"},{"location":"caching.html#mPulseAPI.clearTokenCache-Tuple{AbstractString}","page":"Object caching","title":"mPulseAPI.clearTokenCache","text":"Expire an entry from the token cache.  Use this if the token associated with this tenant is no longer valid.\n\nArguments\n\ntenant::AbstractString :    The tenant name whose token needs to be expired\n\nReturns\n\ntrue :    on success\n\nfalse :    if the entry was not in cache\n\n\n\n\n\n","category":"method"},{"location":"index.html#mPulseAPI.jl-Documentation","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"","category":"section"},{"location":"index.html#Getting-Started","page":"mPulseAPI.jl Documentation","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"mPulseAPI\n\nmPulseAPI.setVerbose","category":"page"},{"location":"index.html#mPulseAPI","page":"mPulseAPI.jl Documentation","title":"mPulseAPI","text":"Communicate with the mPulse Query & Repository REST APIs to fetch information about tenants and apps.\n\n(Image: GH Build) (Image: Coverage Status) (Image: )\n\nDocumentation\n\nThis module:\n\nmPulseAPI.jl: https://akamai.github.io/mPulseAPI.jl/\n\nREST API that this module uses:\n\nmPulse API: https://techdocs.akamai.com/mpulse/reference/api\n\nQuick and dirty usage\n\nThis snippet will get you up and running, see the full documentation for more details.\n\nSee how to generate an API Token for details about the apiToken\n\nusing mPulseAPI\n\n# mPulse uses apiToken for authentication\ntoken = getRepositoryToken(\"<tenant name>\", \"<mPulse api token for tenant>\")\n\n\n# Get a domain by app name\ndomain = getRepositoryDomain(token, appName=\"<app name from mPulse>\")\n\n# Get a domain by App Key (formerly known as API key)\ndomain = getRepositoryDomain(token, appKey=\"<App Key from mPulse>\")\n\ndomain[\"attributes\"][\"appKey\"]                           # Gets the App Key (formerly known as API key)\n                                                         # for this app\ndomain[\"custom_metrics\"]                                 # Get a Dict of custom metrics\ndomain[\"custom_metrics\"][\"Conversion Rate\"]              # Get mapping for Conversion Rate custom metric\ndomain[\"custom_metrics\"][\"Conversion Rate\"][\"fieldname\"] # Get field name for Conversion Rate custom\n                                                         # metric\n\n# Get all domains in tenant\ndomains = getRepositoryDomain(token)\n\n\n# Get a tenant\ntenant = getRepositoryTenant(token, name=\"<tenant name from mPulse>\")\n\n\n\n\n\n","category":"module"},{"location":"index.html#mPulseAPI.setVerbose","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.setVerbose","text":"Set verbosity of API calls.\n\nIf set to true, all URLs, headers and POST data will be printed to the console before making an API call.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Next-steps","page":"mPulseAPI.jl Documentation","title":"Next steps","text":"","category":"section"},{"location":"index.html","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"The following pages provide more detail on this module:","category":"page"},{"location":"index.html","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"RepositoryAPI\nAlerts & Anomaly Detection Models\nQueryAPI","category":"page"},{"location":"index.html#Additional-APIs","page":"mPulseAPI.jl Documentation","title":"Additional APIs","text":"","category":"section"},{"location":"index.html","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"Object caching\nExceptions","category":"page"},{"location":"index.html#Index","page":"mPulseAPI.jl Documentation","title":"Index","text":"","category":"section"},{"location":"index.html","page":"mPulseAPI.jl Documentation","title":"mPulseAPI.jl Documentation","text":"","category":"page"},{"location":"exceptions.html#Exceptions","page":"Exceptions","title":"Exceptions","text":"","category":"section"},{"location":"exceptions.html","page":"Exceptions","title":"Exceptions","text":"Methods in this module may throw the following exceptions.","category":"page"},{"location":"exceptions.html","page":"Exceptions","title":"Exceptions","text":"Modules = [mPulseAPI]\nPages = [\"exceptions.jl\"]","category":"page"},{"location":"exceptions.html#mPulseAPI.mPulseAPIAuthException","page":"Exceptions","title":"mPulseAPI.mPulseAPIAuthException","text":"Thrown when the token used to authenticate with the REST API is invalid or has expired\n\nFields\n\nmsg::AbstractString :    This message is always set to \"Error Authenticating with REST API\"\n\nresponse::Response :    The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\nresponseBody::AbstractString :    The body of the HTTP response from the server\n\n\n\n\n\n","category":"type"},{"location":"exceptions.html#mPulseAPI.mPulseAPIBugException","page":"Exceptions","title":"mPulseAPI.mPulseAPIBugException","text":"Thrown when the REST API has an internal server error and returns a 500 Internal Server Error\n\nFields\n\nmsg::AbstractString :    The string \"Internal Server Error, please report this. Timestamp: <current unix timestamp in seconds since the epoch>\"\n\nresponse::Response :    The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\nresponseBody::AbstractString :    The body of the HTTP response from the server\n\n\n\n\n\n","category":"type"},{"location":"exceptions.html#mPulseAPI.mPulseAPIException","page":"Exceptions","title":"mPulseAPI.mPulseAPIException","text":"Thrown when the REST API has a problem and returns something other than a 2xx response.\n\nFields\n\nmsg::AbstractString :    The error message\n\nresponse::Response :    The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\nresponseBody::AbstractString :    The body of the HTTP response from the server\n\n\n\n\n\n","category":"type"},{"location":"exceptions.html#mPulseAPI.mPulseAPIRequestException","page":"Exceptions","title":"mPulseAPI.mPulseAPIRequestException","text":"Thrown when a request parameter is invalid\n\nFields\n\nmsg::AbstractString :    The error message sent from the mPulse server\n\ncode::AbstractString :    The error code sent from the mPulse server\n\nparameter::AbstractString :    The parameter that the mPulse server had a problem with\n\nvalue::AbstractString :    The value of the parameter that the mPulse server had a problem with\n\nresponse::Response :    The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\n\n\n\n\n","category":"type"},{"location":"exceptions.html#mPulseAPI.mPulseAPIResultFormatException","page":"Exceptions","title":"mPulseAPI.mPulseAPIResultFormatException","text":"Thrown when the result returned by an API call was not in the expected format\n\nFields\n\nmsg::AbstractString :    The error message\n\ndata::Any :    The actual data returned\n\n\n\n\n\n","category":"type"}]
}
